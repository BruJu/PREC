PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:  <http://www.w3.org/2000/01/rdf-schema#>       
PREFIX prec:  <http://bruy.at/prec#> 
PREFIX ex:    <http://example.org/> 
PREFIX pvar:  <http://bruy.at/prec-trans#>
PREFIX pgo:   <http://ii.uwb.edu.pl/pgo#>
PREFIX :      <http://test/>

PREFIX this:  <http://bruy.at/prec#name=>

GRAPH this:empty {
  this:all prec:well_behaved true .
}

GRAPH this:element_identification_check {
  ex:empty_node a prec:prsc_node ;
    prec:element_identification true .

  ex:template_1_good_ident a prec:prsc_node ;
    prec:composedOf << pvar:self a pgo:node >> ;
    prec:element_identification true .

  ex:template_1_bad_ident a prec:prsc_node ;
    prec:composedOf << ex:X a pgo:node >> ;
    prec:element_identification false .

  ex:template_several_good a prec:prsc_node ;
    prec:composedOf
      << pvar:self a pgo:node >> ,
      << pvar:self a :element >> ;
    prec:element_identification true .

  ex:object_self a prec:prsc_node ;
    prec:composedOf << :thegraph :has pvar:self >> ;
    prec:element_identification true .
  
  ex:quoted_self a prec:prsc_node ;
    prec:composedOf << << pvar:self a pgo:node >> :generatedBy :pgo >> ;
    prec:element_identification true .
  
  ex:element_ident_one_good_one_bad a prec:prsc_node ;
    prec:composedOf
      << pvar:self a pgo:node >> ,
      << :thisgraph :generatedBy :prsc >> ;
    prec:element_identification false .

  ex:element_ident_moving a prec:prsc_node ;
    prec:composedOf
      << pvar:self a :A >> ,
      << :A :contains pvar:self >> ;
    prec:element_identification true .

  ex:pvarnode_in_node a prec:prsc_node ;
    prec:composedOf << pvar:node a pgo:node >> ;
    prec:element_identification true .

  ex:pvaredge_in_node a prec:prsc_node ;
    prec:composedOf << pvar:edge a pgo:node >> ;
    prec:element_identification false .

  ex:pvarnode_in_edge a prec:prsc_edge ;
    prec:composedOf << pvar:node a pgo:edge >> ;
    prec:element_identification false .

  ex:pvaredge_in_edge a prec:prsc_edge ;
    prec:composedOf << pvar:edge a pgo:edge >> ;
    prec:element_identification true .

  ex:inconsitent_synonyms a prec:prsc_node ;
    prec:composedOf
      << pvar:node a pgo:node >> ,
      << pvar:self a :element >> ;
    prec:element_identification true .
}

GRAPH this:no_value_loss_check {
  ex:empty_node a prec:prsc_node ;
    prec:no_value_loss true .
  
  ex:empty_edge a prec:prsc_edge ;
    prec:no_value_loss false .
  
  ex:one_triple_edge a prec:prsc_edge ;
    prec:composedOf << pvar:source ex:connected_to pvar:destination >> ;
    prec:no_value_loss true .
  
  ex:edge_with_source_only a prec:prsc_edge ;
    prec:composedOf << pvar:source ex:exists ex:here >> ;
    prec:no_value_loss false .

  ex:edge_with_destination_only a prec:prsc_edge ;
    prec:composedOf << pvar:destination ex:exists ex:here >> ;
    prec:no_value_loss false .

  ex:node_with_name a prec:prsc_node ;
    prec:propertyName "name" ;
    prec:composedOf << pvar:self ex:name "name"^^prec:_valueOf >> ;
    prec:no_value_loss true .
  
  ex:missing_label a prec:prsc_node ;
    prec:propertyName "name" ;
    prec:composedOf << pvar:self ex:name "toto" >> ;
    prec:no_value_loss false .

  ex:two_good a prec:prsc_node ;
    prec:propertyName "name", "age" ;
    prec:composedOf
      << pvar:self ex:name "name"^^prec:_valueOf >>,
      << pvar:self ex:age "age"^^prec:_valueOf >> ;
    prec:no_value_loss true .
  
  ex:one_good_one_bad a prec:prsc_node ;
    prec:propertyName "name", "age" ;
    prec:composedOf
      << pvar:self ex:name "name"^^prec:_valueOf >> ,
      << pvar:self ex:age "name"^^prec:_valueOf >> ;
    prec:no_value_loss false .

  ex:drowned_values a prec:prsc_node ;
    prec:propertyName "firstname", "lastname" ;
    prec:composedOf
      << pvar:self ex:name "firstname"^^prec:_valueOf >> ,
      << pvar:self ex:name "lastname"^^prec:_valueOf >> ;
    prec:no_value_loss false .

  ex:both_drowned_and_identifiable_values a prec:prsc_node ;
    prec:propertyName "firstname", "lastname" ;
    prec:composedOf
      << pvar:self ex:first "firstname"^^prec:_valueOf >> ,
      << pvar:self ex:last "lastname"^^prec:_valueOf >> ,
      << pvar:self ex:name "firstname"^^prec:_valueOf >> ,
      << pvar:self ex:name "lastname"^^prec:_valueOf >> ;
    prec:no_value_loss true .

  ex:rdf_star_prop a prec:prsc_edge ;
    prec:propertyName "since" ;
    prec:composedOf
      <<
        << pvar:source ex:connected_to pvar:destination >> 
        ex:since
        "since"^^prec:_valueOf
      >> ;
    prec:no_value_loss true .

  ex:weird_rdf_star a prec:prsc_node ;
    prec:propertyName "familyname", "givenname" ;
    prec:composedOf
      <<
        << pvar:self ex:member_of_family "familyname"^^prec:_valueOf >>
        ex:givenname "givenname"^^prec:_valueOf
      >> ;
    prec:no_value_loss true .
}

GRAPH this:signature_triple_check {
  [] prec:all_signed true .

  # The signature criteria forces templates to have a triple
  
  [] prec:all_signed false ,
    ex:empty_node .

  ex:empty_node a prec:prsc_node .

  # 

  ex:only_a prec:all_signed true, ex:node_a .
  ex:only_b prec:all_signed true, ex:node_b .
  ex:ok_a_b prec:all_signed true, ex:node_a, ex:node_b .
  ex:bad_a_alike prec:all_signed false, ex:node_a, ex:node_alike .

  ex:node_a a prec:prsc_node ;
    prec:nodeLabel "A" ;
    prec:composedOf << pvar:self a ex:A >> .

  ex:node_b a prec:prsc_node ;
    prec:nodeLabel "B" ;
    prec:composedOf << pvar:self a ex:B >> .

  ex:node_alike a prec:prsc_node ;
    prec:nodeLabel "A-like" ;
    prec:composedOf << pvar:self a ex:A >> .

  # Literal production

  ex:node_named_c a prec:prsc_node ;
    prec:nodeLabel "C" ;
    prec:propertyName "name" ;
    prec:composedOf << pvar:self ex:name "name"^^prec:_valueOf >> .
  
  ex:node_firstnamed_d a prec:prsc_node ;
    prec:nodeLabel "D" ;
    prec:propertyName "firstname" ;
    prec:composedOf << pvar:self ex:name "firstname"^^prec:_valueOf >> .
  
  ex:node_firstnamed_e a prec:prsc_node ;
    prec:nodeLabel "E" ;
    prec:propertyName "firstname" ;
    prec:composedOf << pvar:self ex:firstname "firstname"^^prec:_valueOf >> .
  
  ex:bad_c_d prec:all_signed false, ex:node_named_c, ex:node_firstnamed_d .
  ex:ok_c_e prec:all_signed true, ex:node_named_c, ex:node_firstnamed_e .
  ex:ok_d_e prec:all_signed true, ex:node_firstnamed_d, ex:node_firstnamed_e .

  # With edges

  ex:reflexive_node a prec:prsc_node ;
    prec:nodeLabel "Philosoph" ;
    prec:composedOf << pvar:self ex:knows pvar:self >> .
  
  ex:not_so_reflexive_node a prec:prsc_node ;
    prec:nodeLabel "CarefulPhilosoph" ;
    prec:composedOf << pvar:self ex:knows ex:themself >> .

  ex:edge_knows a prec:prsc_edge ;
    prec:edgeLabel "Knows" ;
    prec:composedOf << pvar:source ex:knows pvar:destination >> .
  
  ex:bad_knows prec:all_signed false, ex:reflexive_node, ex:edge_knows .
  ex:ok_knows prec:all_signed true, ex:not_so_reflexive_node, ex:edge_knows .

  # Multiple similar signatures

  ex:fan_of_names a prec:prsc_node ;
    prec:nodelLabel "FanOfNames" ;
    prec:propertyName "name", "name2" ;
    prec:composedOf
      << pvar:self ex:name "name"^^prec:_valueOf >> ,
      << pvar:self ex:name "name2"^^prec:_valueOf >> .
  
  ex:only_me_use_names_because_im_alone prec:all_signed true,
    ex:fan_of_names .

  ex:only_me_use_names_and_i_have_friends prec:all_signed true,
    ex:fan_of_names, ex:node_firstnamed_e .
  
  ex:someone_else_uses_names prec:all_signed false,
    ex:fan_of_names, ex:node_named_c .

  # One signature, one non signature

  ex:dog a prec:prsc_node ;
    prec:nodelLabel "Dog" ;
    prec:composedOf
      << pvar:self a pgo:node >> ,
      << pvar:self a ex:Dog >> .
  
  ex:cat a prec:prsc_node ;
    prec:nodeLabel "Cat" ;
    prec:composedOf
      << pvar:self a pgo:node >> ,
      << pvar:self a ex:Cat >> .
  
  ex:cats_and_dogs prec:all_signed true, ex:dog, ex:cat .
}

GRAPH this:animal_context {
  this:all prec:well_behaved true .

  ex:cat a prec:prsc_node ;
    prec:nodeLabel "Cat" ;
    prec:propertyName "name" ;
    prec:composedOf
      << pvar:self a pgo:node >> ,
      << pvar:self ex:name "name"^^prec:_valueOf >> ,
      << pvar:self a ex:Cat >> .
    
  ex:dog a prec:prsc_node ;
    prec:nodeLabel "Dog" ;
    prec:propertyName "name" ;
    prec:composedOf
      << pvar:self ex:name "name"^^prec:_valueOf >> ,
      << pvar:self ex:oncesaid "Wouf" >> .
    
  ex:human a prec:prsc_node ;
    prec:nodeLabel "Human" ;
    prec:composedOf << pvar:self a ex:Human >> .
  
  ex:ownership a prec:prsc_edge ;
    prec:edgeLabel "Owns" ;
    prec:propertyName "declaration_date" ;
    prec:composedOf
      << pvar:self a ex:ownership_declaration >> ,
      << pvar:self ex:owner pvar:source >> ,
      << pvar:self ex:about pvar:destination >> ,
      << pvar:self ex:filledOn "declaration_date"^^prec:_valueOf >> ;
    prec:no_value_loss true .
}

GRAPH this:ok_monoedge {
  this:all prec:well_behaved true .

  ex:human a prec:prsc_node ;
    prec:composedOf << pvar:self a ex:Human >> .
  
  ex:knows a prec:prsc_edge ;
    prec:composedOf << pvar:source ex:knows pvar:destination >> .
}

GRAPH this:bad_monoedge {
  this:all prec:well_behaved false .

  ex:philosoph a prec:prsc_node ;
    prec:composedOf << pvar:self ex:knows pvar:destination >> .
  
  ex:knows a prec:prsc_edge ;
    prec:composedOf << pvar:source ex:knows pvar:destination >> .
}

GRAPH this:bad_monoedges {
  this:all prec:well_behaved false .

  ex:human a prec:prsc_node ;
    prec:composedOf << pvar:self a ex:Human >> .
  
  ex:knows a prec:prsc_edge ;
    prec:edgeLabel "knows" ;
    prec:composedOf << pvar:source ex:knows pvar:destination >> .
    
  ex:heard_about a prec:prsc_edge ;
    prec:edgeLabel "heard_about" ;
    prec:composedOf << pvar:source ex:knows pvar:destination >> .
}

GRAPH this:good_monoedges {
  this:all prec:well_behaved true .

  ex:human a prec:prsc_node ;
    prec:composedOf << pvar:self a ex:Human >> .
  
  ex:knows a prec:prsc_edge ;
    prec:edgeLabel "knows" ;
    prec:composedOf << pvar:source ex:knows pvar:destination >> .
    
  ex:heard_about a prec:prsc_edge ;
    prec:edgeLabel "heard_about" ;
    prec:composedOf << pvar:source ex:heard_about pvar:destination >> .
}

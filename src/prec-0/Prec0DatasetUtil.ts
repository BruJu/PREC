
/**
 * Methods related to consuming an RDF graph generated by PREC-0
 */

import { DatasetCore, Quad_Object, Quad_Subject } from "@rdfjs/types";

import { DataFactory } from "n3";
import namespace from '@rdfjs/namespace';
import { checkAndFollow, extractAndDeleteRdfList, RDFPath } from "../rdf/path-travelling";
import * as PrecUtils from '../rdf/utils';

const rdf  = namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#", { factory: DataFactory });
const rdfs = namespace("http://www.w3.org/2000/01/rdf-schema#"      , { factory: DataFactory });
const prec = namespace("http://bruy.at/prec#"                       , { factory: DataFactory });
const $quad = DataFactory.quad;

/**
 * Returns the rdfs:label value of proxyLabel. requiredPaths and
 * optionalPaths are conditions for other quads that has proxyLabel as the
 * subject, like in the checkAndFollow method.
 * 
 * Note that this function returns a string.
 */
export function readLabelOf(
  dataset: DatasetCore,
  proxyLabel: Quad_Subject,
  requiredPaths: RDFPath[],
  optionalPaths: RDFPath[]
) {
  let realLabel = checkAndFollow(dataset, proxyLabel, rdfs.label, requiredPaths, optionalPaths);

  if (realLabel === null || realLabel.termType !== "Literal") {
    return null;
  }

  // TODO : check if the type of the literal is xsd:string
  return realLabel.value;
};

/** Return the name of the given property, if its a property. */
export function readPropertyName(dataset: DatasetCore, property: Quad_Subject) {
  return readLabelOf(
    dataset,
    property,
    [[rdf.type, prec.PropertyKey  ]],
    [[rdf.type, prec.CreatedPropertyKey]]
  );
};

/**
 * Return the name of the label, if its a label.
 * @param term The node label
 * @param labelType The type of label in prec:CreatedLabel
 * @returns The label as a string
 */
export function getRealLabel(dataset: DatasetCore, term: Quad_Subject, labelType: Quad_Object) {
  return readLabelOf(dataset, term, [], [[rdf.type, labelType]]);
}


////////////////////////////////////////////////////////////////////////////////

export type ExtractedPropertyValue = string | number | undefined | ExtractedPropertyValue[];

/**
 * Consumes a propertyValue = reads it from the dataset, removes it from it and
 * return its content as a pure Javascript object.
 */
export function extractAndDeletePropertyValue(dataset: DatasetCore, value: Quad_Subject): ExtractedPropertyValue {
  if (dataset.has($quad(value, rdf.type, rdf.List))) {
    const r = extractAndDeleteRdfList(dataset, value);
    return r.map(quad => extractAndDeletePropertyValue(dataset, quad as Quad_Subject));
  } else if (dataset.has($quad(value, rdf.type, prec.PropertyKeyValue))) {
    dataset.delete($quad(value, rdf.type, prec.PropertyKeyValue));

    let v = checkAndFollow(dataset, value, rdf.value, [], []);
    if (v == null) throw "Invalid RDF Graph - " + value.value + " has meta properties (not yet supported)";

    dataset.delete($quad(value, rdf.value, v));

    return PrecUtils.rdfLiteralToValue(v);
  } else {
    throw "Invalid RDF Graph - " + value.value + " is not a valid property value";
  }
}


